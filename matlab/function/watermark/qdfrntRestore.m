function secret = qdfrntRestore(source, model, kp, ks, kt, intentsity)
%qdfrntRestore - restore watermark in image
%
% - Arguments:
%       - source [nxnx3 double matrix] matrix of colorful source image
%       - model [trained svm model] trained svm model
%       - kp [kx4 integer matrix] mark location key
%       - ks [integer] the times of secret arnold transform
%       - kt [8x8 double matrix] the kernel matrix of DFRNT, can be generated by function 'dfrntKernel'
%       - intensity [double] the intensity of watermarking
%
% - Returns:
%       - secret [mxmx3 double matrix] watermark matrix

% init secret sequence
secretSequence = [];

% get size info
[sourceRow, ~, ~] = size(source);
[kpRow, ~, ~] = size(kp);

% split picture to 8x8 smaller blocks
blocks = splitBlock(source, 8);
[~, blocksLength] = size(blocks);
[blockRow, ~, ~] = size(blocks{1, 1});

% set a pure unit quaternion
u = [0, 1, 0, 0];

% do QDFRNT to every blocks
encodedBlocks = cell(1, blocksLength);
for n = 1 : blocksLength
    t = zeros(blockRow, blockRow, 4);
    for n1 = 2 : 4
        t(:, :, n1) = blocks{1, n}(:, :, n1 - 1);
    end
    encodedBlocks{1, n} = lqdfrnt2(t, kt, kt, u);
end

% for every position, do some thing
for n = 1 : kpRow
    % get info
    blockIndex = kp(n, 1);
    channel = kp(n, 2);
    row = kp(n, 3);
    col = kp(n, 4);

    % calculate svm input data
    blockChannel = encodedBlocks{1, blockIndex}(:, :, channel);
    svmInput = zeros(1, 9);
    for n1 = -1 : 1
        for n2 = -1 : 1
        end
    end
end

end