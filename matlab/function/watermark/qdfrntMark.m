function output = qdfrntMark(source, secret, ks, kt, ikt, intensity)
%qdfrntMark - add watermark to a picture
%
% - Description:
%       add a watermark to picture, with QDFRNT function
%
% - Arguments:
%       - source [nxnx3 double matrix] matrix of colorful source image
%       - secret [mxm binary matrix] matrix of binary secret image
%       - ks [integer] a key of watermarking, the times of secret arnold transform
%       - kt [8x8 double matrix] kernel matrix of transform, can be generated by function 'dfrntKernel'
%       - ikt [8x8 double matrix] the kernel matrix which is used to restored transform
%       - intensity [double] the intensity of watermarking
%
% - Returns:
%       - output [nxnx3 double matrix] output matrix

% get size info
[sourceRow, sourceCol, sourceHeight] = size(source);

% do arnold transform to secret
secretArnold = arnold(secret, ks);

% get binary secret sequence
secretSequence = matrixToVector(secretArnold);
[~, secretSequenceLength] = size(secretSequence);

% split picture to 8x8 smaller blocks
blocks = splitBlock(source, 8);
[~, blocksLength] = size(blocks);
[blockRow, blockCol, blockHeight] = size(blocks{1, 1});

% set a pure unit quaternion
u = [0, 1, 0, 0];

% do QDFRNT to every blocks
encodedBlocks = cell(1, blocksLength);
for n = 1 : blocksLength
    [blockRow, blockCol, blockHeight] = size(blocks{1, n});
    t = zeros(blockRow, blockCol, blockHeight + 1);
    for n1 = 2 : 4
        t(:, :, n1) = blocks{1, n}(:, :, n1 - 1);
    end
    encodedBlocks{1, n} = lqdfrnt2(t, kt, kt, u);
end

% add some info
for n = 1 : blocksLength
    if rem(n, 10) == 0
        encodedBlocks{1, n}(1, 1, 3) = encodedBlocks{1, n}(1, 1, 3) + intensity;
    end
end

% do ILQDFRNT to every blocks
for n = 1 : blocksLength
    encodedBlocks{1, n} = lqdfrnt2(encodedBlocks{1, n}, ikt, ikt, u);
    encodedBlocks{1, n} = encodedBlocks{1, n}(:, :, [2, 3, 4]);
end

% merge
output = mergeBlock(encodedBlocks, fix(sourceRow / blockRow));

end